{"version":3,"sources":["components/Album.js","App.js","serviceWorker.js","index.js"],"names":["Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","Album","buildTemplate","list","props","map","card","Grid","item","key","id","xs","sm","md","xl","Card","className","CardMedia","image","imgSrc","title","CardContent","gutterBottom","component","shortDescription","CardActions","Button","size","Fragment","AppBar","position","Toolbar","noWrap","Container","maxWidth","container","spacing","this","React","Component","App","state","isLoading","setState","fetch","then","response","json","data","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6YAiBA,SAASA,IACP,OACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,MAAM,UACrD,kBACD,kBAACC,EAAA,EAAD,CAAMF,MAAM,UAAUG,KAAK,4BAA3B,gBAEQ,KACP,IAAIC,MAAOC,cACX,K,IAKDC,E,4MACJC,cAAgB,WAAO,IACbC,EAAS,EAAKC,MAAdD,KAER,OAAOA,EAAKE,KAAI,SAACC,GAAD,OACd,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,IAAKH,EAAKI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAClD,kBAACC,EAAA,EAAD,CAAMC,UAAW,QACf,kBAACC,EAAA,EAAD,CACED,UAAW,YACXE,MANO,uCAMSZ,EAAKa,OACrBC,MAAOd,EAAKc,QAEd,kBAACC,EAAA,EAAD,CAAaL,UAAW,eACtB,kBAACvB,EAAA,EAAD,CAAY6B,cAAY,EAAC5B,QAAQ,KAAK6B,UAAU,MAC7CjB,EAAKc,OAER,kBAAC3B,EAAA,EAAD,KAAaa,EAAKkB,mBAEpB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQX,UAAW,cAAhC,0DAGA,kBAACU,EAAA,EAAD,CAAQC,KAAK,QAAQX,UAAW,cAAhC,2D,uDAUR,OACE,kBAAC,IAAMY,SAAP,KAGE,kBAACC,EAAA,EAAD,CAAQC,SAAS,QAAQpB,GAAI,UAC3B,kBAACqB,EAAA,EAAD,CAASf,UAAW,WAClB,kBAAC,IAAD,CAAcA,UAAW,SACzB,kBAACvB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAAUqC,QAAM,GAA/C,qBAMJ,8BAEE,yBAAKhB,UAAW,eACd,yBAAKA,UAAW,eACd,kBAACU,EAAA,EAAD,CAAQhC,QAAQ,YAAYsB,UAAW,cAAvC,sDAKJ,kBAACiB,EAAA,EAAD,CAAWjB,UAAW,WAAYkB,SAAS,MAEzC,kBAAC3B,EAAA,EAAD,CAAM4B,WAAS,EAACC,QAAS,GACtBC,KAAKnC,mBAKZ,4BAAQc,UAAW,UACjB,kBAACvB,EAAA,EAAD,CAAYC,QAAQ,KAAKE,MAAM,SAAS0B,cAAY,GAApD,UAGA,kBAAC7B,EAAA,EAAD,CACEC,QAAQ,YACRE,MAAM,SACND,MAAM,gBACN4B,UAAU,KAJZ,gDAQA,kBAAC/B,EAAD,Y,GA1EU8C,IAAMC,WCDXC,E,4MAxBbC,MAAQ,CACNtC,KAAM,GACNuC,WAAW,G,kEAGQ,IAAD,OAElBL,KAAKM,SAAS,CAAED,WAAW,IAC3BE,MAFY,oDAEDC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAAQF,MAAK,SAACG,GACnDC,QAAQC,IAAIF,GACZ,EAAKL,SAAS,CAAED,WAAW,EAAOvC,KAAM6C,S,+BAIlC,IACA7C,EAASkC,KAAKI,MAAdtC,KACR,OACE,yBAAKa,UAAU,OACb,kBAAC,EAAD,CAAOb,KAAMA,S,GAnBHmC,IAAMC,WCQJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.9f2a594e.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport WhatsappIcon from '@material-ui/icons/WhatsApp';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\n// import CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport PropTypes from 'prop-types';\nimport './Album.css';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nclass Album extends React.Component {\n  buildTemplate = () => {\n    const { list } = this.props;\n    const prefix = 'http://localhost:3000/assets/images/';\n    return list.map((card) => (\n      <Grid item key={card.id} xs={12} sm={12} md={6} xl={4}>\n        <Card className={'card'}>\n          <CardMedia\n            className={'cardMedia'}\n            image={prefix + card.imgSrc}\n            title={card.title}\n          />\n          <CardContent className={'cardContent'}>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              {card.title}\n            </Typography>\n            <Typography>{card.shortDescription}</Typography>\n          </CardContent>\n          <CardActions>\n            <Button size=\"small\" className={'cardButton'}>\n              Подробнее\n            </Button>\n            <Button size=\"small\" className={'cardButton'}>\n              Заказать\n            </Button>\n          </CardActions>\n        </Card>\n      </Grid>\n    ));\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        {/* <CssBaseline /> */}\n\n        <AppBar position=\"fixed\" id={'appbar'}>\n          <Toolbar className={'toolbar'}>\n            <WhatsappIcon className={'icon'} />\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\n              8-913-123-45-67\n            </Typography>\n          </Toolbar>\n        </AppBar>\n\n        <main>\n          {/* Hero unit */}\n          <div className={'heroContent'}>\n            <div className={'heroButtons'}>\n              <Button variant=\"contained\" className={'mainButton'}>\n                Заказать\n              </Button>\n            </div>\n          </div>\n          <Container className={'cardGrid'} maxWidth=\"md\">\n            {/* End hero unit */}\n            <Grid container spacing={4}>\n              {this.buildTemplate()}\n            </Grid>\n          </Container>\n        </main>\n        {/* Footer */}\n        <footer className={'footer'}>\n          <Typography variant=\"h6\" align=\"center\" gutterBottom>\n            Footer\n          </Typography>\n          <Typography\n            variant=\"subtitle1\"\n            align=\"center\"\n            color=\"textSecondary\"\n            component=\"p\"\n          >\n            Something here to give the footer a purpose!\n          </Typography>\n          <Copyright />\n        </footer>\n        {/* End footer */}\n      </React.Fragment>\n    );\n  }\n}\n\nAlbum.propTypes = {\n  list: PropTypes.array.isRequired\n};\n\nexport { Album };\n","import React from 'react';\nimport './App.css';\nimport { Album } from './components/Album';\n\nclass App extends React.Component {\n  state = {\n    list: [],\n    isLoading: false\n  };\n\n  componentDidMount() {\n    const url = 'http://localhost:3000/assets/json/cakesList.json';\n    this.setState({ isLoading: true });\n    fetch(url).then((response) => response.json()).then((data) => {\n      console.log(data);\n      this.setState({ isLoading: false, list: data });\n    });\n  }\n\n  render() {\n    const { list } = this.state;\n    return (\n      <div className=\"App\">\n        <Album list={list} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}