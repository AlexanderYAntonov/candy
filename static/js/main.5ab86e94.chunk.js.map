{"version":3,"sources":["components/Album.js","components/Details.js","components/NotFound.js","components/Order.js","App.js","serviceWorker.js","index.js"],"names":["Album","buildTemplate","list","props","map","card","Grid","item","key","id","xs","sm","md","xl","className","Card","CardMedia","image","imgSrc","title","CardContent","Typography","gutterBottom","variant","component","shortDescription","CardActions","to","Button","size","Fragment","Container","maxWidth","container","spacing","this","React","Component","Details","data","fullDescription","NotFound","Order","Copyright","align","Date","getFullYear","App","state","isLoading","DetailsWrapper","match","params","filter","length","setState","fetch","then","response","json","catch","error","console","AppBar","position","Toolbar","color","noWrap","exact","path","render","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5ab86e94.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './Album.css';\nimport '../styles.css';\n\nclass Album extends React.Component {\n  buildTemplate = () => {\n    const { list } = this.props;\n    const prefix = '/candy/assets/images/';\n    return list.map((card) => (\n      <Grid\n        item\n        key={card.id}\n        xs={12}\n        sm={12}\n        md={6}\n        xl={4}\n        className={'albumGrid'}\n      >\n        <Card className={'card'}>\n          <CardMedia\n            className={'cardMedia'}\n            image={prefix + card.imgSrc}\n            title={card.title}\n          />\n          <CardContent className={'cardContent'}>\n            <Typography\n              gutterBottom\n              variant=\"h6\"\n              component=\"h3\"\n              className={'cardTitle'}\n            >\n              {card.title}\n            </Typography>\n            <Typography className={'cardText'}>\n              {card.shortDescription}\n            </Typography>\n          </CardContent>\n          <CardActions className={'cardActions'}>\n            <Link to={'/details/' + card.id}>\n              <Button size=\"small\" className={'cardButton'}>\n                Подробнее\n              </Button>\n            </Link>\n            <Link to=\"/order\">\n              <Button size=\"small\" className={'cardButton'}>\n                Заказать\n              </Button>\n            </Link>\n          </CardActions>\n        </Card>\n      </Grid>\n    ));\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <main>\n          <div className={'hero-content'}>\n            <div className={'heroButtons'}>\n              <Link to=\"/order\">\n                <Button variant=\"contained\" className={'mainButton'}>\n                  Заказать\n                </Button>\n              </Link>\n            </div>\n            <div className={'hero-title'}>\n              Домашний кондитер - выпечка на заказ\n            </div>\n          </div>\n          <Container className={'cardGrid'} maxWidth=\"md\">\n            <Grid container spacing={4}>\n              {this.buildTemplate()}\n            </Grid>\n          </Container>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nAlbum.propTypes = {\n  list: PropTypes.array.isRequired\n};\n\nexport { Album };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport './Details.css';\nexport class Details extends React.Component {\n  render() {\n    const { data } = this.props;\n    if (data) {\n      const { title, fullDescription, imgSrc } = data ? data : {};\n\n      const prefix = '/candy/assets/images/';\n      return (\n        <React.Fragment>\n          <main className={'details__container'}>\n            <Card className={'details__card'}>\n              <CardMedia\n                className={'details__image'}\n                image={prefix + imgSrc}\n                title={title}\n              />\n              <div className={'details__text'}>\n                <CardContent className={'details__content'}>\n                  <Typography\n                    gutterBottom\n                    variant=\"h6\"\n                    component=\"h3\"\n                    className={'details__title'}\n                  >\n                    {title}\n                  </Typography>\n                  <Typography className={'details__description'}>\n                    {fullDescription}\n                  </Typography>\n                </CardContent>\n                <CardActions className={'details__actions'}>\n                  <Link to=\"/\">\n                    <Button size=\"small\" className={'details__card-btn'}>\n                      Назад\n                    </Button>\n                  </Link>\n                  <Link to=\"/order\">\n                    <Button size=\"small\" className={'details__card-btn'}>\n                      Заказать\n                    </Button>\n                  </Link>\n                </CardActions>\n              </div>\n            </Card>\n          </main>\n\n          {/* <main className={'details__container'}>\n            <CardMedia\n              className={'cardMedia'}\n              image={prefix + imgSrc}\n              title={title}\n            />\n            <div>\n              <h1>{title}</h1>\n              <p>{fullDescription}</p>\n\n              <pre>{JSON.stringify(data)}</pre>\n              <Link to=\"/\">Вернуться к выбору тортика</Link>\n            </div>\n          </main> */}\n        </React.Fragment>\n      );\n    } else {\n      return <React.Fragment />;\n    }\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\nimport Container from '@material-ui/core/Container';\nimport './NotFound.css';\nimport '../styles.css';\n\nexport class NotFound extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <main className={'notFound'}>\n          <div className={'hero-content not-found__hero'}>\n            <div className={'hero-title'}>404</div>\n          </div>\n          <Container maxWidth=\"md\" className={'not-found__container'}>\n            <h3>Упс, страница не нашлась...</h3>\n            <Link to=\"/\" className=\"icon-link\">\n              <KeyboardBackspaceIcon className={'icon'} />Вернуться к выбору\n              тортика\n            </Link>\n          </Container>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Container from '@material-ui/core/Container';\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\nimport './Order.css';\nimport '../styles.css';\n\nexport class Order extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <main className={'order__main'}>\n          <div className={'hero-content order__hero'}>\n            <div className={'hero-title'}>Как сделать заказ</div>\n          </div>\n          <Container maxWidth=\"md\" className={'order__container'}>\n            <p>\n              Чтобы заказать торт, вам нужно написать или позвонить в Whatsapp\n              8-913-123-45-67. Мы договоримся о весе торта и сроках его выпечки.\n              Вы можете забрать торт по адресу: наш адрес.\n            </p>\n\n            <Link to=\"/\" className={'icon-link'}>\n              <KeyboardBackspaceIcon className={'icon'} />Вернуться к выбору\n              тортика\n            </Link>\n          </Container>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport { Album } from './components/Album';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport WhatsappIcon from '@material-ui/icons/WhatsApp';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Switch, Route } from 'react-router-dom';\nimport { Details } from './components/Details';\nimport { NotFound } from './components/NotFound';\nimport { Order } from './components/Order';\nimport './App.css';\nimport './components/Album.css';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" align=\"center\">\n      {'© Домашний кондитер '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nclass App extends React.Component {\n  state = {\n    list: [],\n    isLoading: false\n  };\n\n  componentDidMount() {\n    const url = '/candy/assets/json/cakesList.json';\n    this.setState({ isLoading: true });\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({ isLoading: false, list: data });\n      })\n      .catch((error) => {\n        console.error(error);\n        this.setState({ isLoading: false, list: [] });\n      });\n  }\n\n  DetailsWrapper = (props) => {\n    const { id } = props.match.params;\n    const { list } = this.state;\n    const data = list.filter((item) => item.id === id);\n\n    const result =\n      data.length > 0 ? <Details data={data[0]} key={id} /> : <NotFound />;\n    return result;\n  };\n\n  render() {\n    const { list } = this.state;\n    return (\n      <div className=\"App\">\n        <AppBar position=\"fixed\" id={'appbar'}>\n          <Toolbar className={'toolbar'}>\n            <WhatsappIcon className={'icon'} />\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\n              8-913-123-45-67\n            </Typography>\n          </Toolbar>\n        </AppBar>\n\n        <div className={'switch'}>\n          <Switch>\n            <Route exact path=\"/\" render={() => <Album list={list} />} />\n            <Route path=\"/details/:id\" component={this.DetailsWrapper} />\n            <Route path=\"/order\" component={Order} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n\n        <footer className={'footer'}>\n          <Typography\n            variant=\"subtitle1\"\n            align=\"center\"\n            component=\"p\"\n            className={'footerText'}\n          >\n            <WhatsappIcon className={'icon'} /> 8-913-123-45-56\n          </Typography>\n          <Copyright />\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}